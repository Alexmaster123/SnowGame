var tilesize = 40
var levels = []

levels[0] = [[[-1], [-1], [-1], [-1], [-1], [-1], [-1], [4], [1], [1], [1], [1], [-1], [-1], [0]], [[-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [4], [1], [1], [1], [-1], [-1], [1]], [[-1], [-1], [-1], [-1], [0], [-1], [-1], [-1], [-1], [4], [1], [1], [-1], [-1], [2]], [[-1], [-1], [-1], [-1], [1], [-1], [-1], [-1], [-1], [-1], [4], [1], [-1], [-1], [1]], [[-1], [-1], [-1], [-5], [1], [-1], [-1], [-1], [-1], [-1], [-1], [1], [-1], [-1], [1]], [[-1], [-1], [-1], [-1], [1], [-1], [-1], [-1], [-1], [-1], [-1], [1], [-1], [-1], [2]], [[-1], [-1], [-1], [-1], [1], [-1], [-1], [-1], [-1], [-1], [-1], [3], [-1], [-1], [1]], [[-1], [-1], [-1], [-1], [3], [-1], [-1], [0], [-1], [-1], [-1], [-1], [-1], [-1], [1]], [[-1], [-1], [-1], [-1], [-1], [-1], [-1], [1], [-1], [-1], [-1], [-1], [-1], [-1], [2]], [[-1], [-1], [-1], [-1], [-1], [-1], [-1], [2], [-1], [-1], [-1], [-1], [-1], [-1], [1]], [[-1], [-1], [-1], [-1], [-1], [-1], [-5], [1], [-1], [-1], [-1], [-1], [-1], [-1], [1]], [[-1], [-1], [-1], [-1], [-1], [-1], [-1], [1], [-1], [-1], [-1], [-1], [-1], [-1], [1]], [[-1], [-1], [-1], [0], [-1], [-1], [-1], [2], [-1], [-1], [-1], [-1], [-1], [-1], [1]], [[-1], [-1], [-1], [1], [-1], [-1], [-1], [1], [-1], [-1], [-1], [-1], [-1], [-1], [2]], [[-1], [-1], [-1], [1], [-1], [-1], [-1], [3], [-1], [-1], [-1], [-1], [-1], [-1], [1]], [[-1], [-1], [-1], [1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [1]], [[-1], [-1], [-5], [1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [0], [-1], [-1], [1]], [[-1], [-1], [-1], [1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [1], [-1], [-1], [2]], [[-1], [-1], [-1], [1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [1], [-1], [-1], [1]], [[-1], [-1], [-1], [1], [-1], [-1], [-1], [-1], [0], [-1], [-1], [1], [-1], [-1], [3]]]
levels
levels
levels
levels
levels
levels
levels
levels
levels
levels[10] = [[[-1], [-1], [1], [-1], [-1], [-1], [-1], [3], [-1], [-1], [-1], [-1], [-1], [-1], [0]], [[-1], [-5], [1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [2]], [[-1], [-6], [1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [1]], [[-1], [-1], [1], [-1], [-1], [-1], [-1], [-5], [0], [-1], [-1], [0], [-1], [-1], [2]], [[-1], [-1], [1], [-1], [-5], [0], [-1], [-1], [1], [-1], [-5], [1], [-1], [-1], [1]], [[-1], [-1], [1], [-1], [-1], [1], [-1], [-1], [1], [-1], [-1], [1], [-1], [-1], [2]], [[-1], [-1], [1], [-1], [-1], [1], [-1], [-1], [1], [-1], [-1], [1], [-1], [-1], [1]], [[-1], [-1], [1], [-1], [-1], [1], [-1], [-1], [1], [-1], [-1], [1], [-1], [-1], [2]], [[-1], [1], [1], [-1], [-1], [1], [-1], [-1], [1], [-1], [-1], [1], [-1], [-1], [1]], [[-1], [-1], [-1], [-1], [-1], [1], [-1], [-1], [1], [-1], [-1], [1], [-1], [-1], [2]], [[-1], [-1], [-1], [-1], [-1], [1], [-1], [-5], [3], [-1], [-1], [1], [-1], [-1], [1]], [[-1], [-1], [-1], [-1], [-5], [1], [-1], [-1], [-1], [-1], [-5], [1], [-1], [-1], [1]], [[-1], [-1], [0], [-1], [-1], [1], [-1], [-1], [-1], [-1], [-1], [1], [-1], [-1], [1]], [[-1], [-1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [-1], [-1], [2]], [[-1], [-1], [3], [-1], [-1], [2], [-1], [-1], [-1], [1], [1], [1], [-1], [-1], [1]], [[-1], [-1], [-1], [-1], [-6], [3], [-1], [-1], [-6], [1], [1], [1], [1], [1], [2]], [[-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [3], [-1], [-1], [-1], [-1], [1]], [[-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [2]], [[-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [1]], [[-1], [-6], [0], [-1], [-1], [-1], [-6], [0], [-1], [-1], [-6], [0], [-1], [-1], [3]]]

function TerrainBlock(game, x, y, w, h) {
    GameObject.call(this, game, x, y, w, h, TYPE.BLOCK)
    this.trasparent = false

}
TerrainBlock.prototype = Object.create(GameObject.prototype)
TerrainBlock.prototype.constructor = TerrainBlock

function Level(id, game, map) {

    this.ide = id
    this.blocks = []   
    this.enemys = []
    this.import = map
    this.rand = Math.floor((Math.random() * 4) + 1)

    //disegna blocchi del terreno
    this.draw = function (map) {
        var tile = game.resource.tileMap
        var tileWidthFix = 35
        var row = map.length
        var column = map[0].length
        for (var x = 0; x < row; x += 1) {
            for (var y = 0; y < column; y += 1) {
                if (map[x][y] != -1) {
                    var px = x * tilesize
                    var py = y * tilesize
                    var ofx = map[x][y] * tilesize
                    game.ctx.drawImage(tile, ofx, 0, tileWidthFix, tile.height,
                                    px, py, tilesize, tilesize)
                }
            }
        }
    }
    //carica oggetti del livello
    this.load = function (map) {
        var row = map.length
        var column = map[0].length
        var tile = game.resource.tileMap
        var enemyTile = game.resource.enemy
        for (var x = 0; x < row; x += 1) {
            for (var y = 0; y < column; y += 1) {
                if (map[x][y] != -1) {
                    var px = x * tilesize
                    var py = y * tilesize
                    if (map[x][y] == -5) {
                        var sizeW = game.resource.playerIdle.width
                        var sizeH = game.resource.playerIdle.height
                        var fixPX = px - (sizeW - tilesize)
                        var fixPY = py - (sizeH - tilesize)
                        this.enemys.push(new Enemy(game, fixPX, fixPY, sizeW, sizeH))   
                    }
                    else if (map[x][y] == -6) {
                        var sizeW = game.resource.playerIdle.width
                        var sizeH = game.resource.playerIdle.height
                        var fixPX = px - (sizeW - tilesize)
                        var fixPY = py - (sizeH - tilesize)
                        this.enemys.push(new EnemyStand(game, fixPX, fixPY, sizeW, sizeH))
                    }
                    else if (map[x][y] != -1) {
                        this.blocks.push(new TerrainBlock(game, px, py + 2, tilesize, tilesize))
                    }
                }
            }
        }
    }

    this.LoadBlocks = function () {
        if (levels[this.ide] != null) {
            var map = levels[this.ide]
            this.load(map)
        }
        else if (this.import != null) {     //livello importato dall'editor(matrice righe/colonne invertite)
            var map = this.import
            this.load(map)
        }
    }

    this.Clear = function () {
        this.blocks = []
        this.enemys = []
    }

    this.Draw = function () {

        game.ctx.save()
        var pattern = game.ctx.createPattern(game.resource.background1, "repeat")
        switch (this.rand) {
            case 1: pattern = game.ctx.createPattern(game.resource.background1, "repeat")
                break
            case 2: pattern = game.ctx.createPattern(game.resource.background2, "repeat")
                break
            case 3: pattern = game.ctx.createPattern(game.resource.background3, "repeat")
                break
            case 4: pattern = game.ctx.createPattern(game.resource.background4, "repeat")
                break
        }
        game.ctx.fillStyle = pattern
        game.ctx.fillRect(0, 0, game.gameRectWidth, game.gameRectHeight)
        if (levels[this.ide] != null) {
            var map = levels[this.ide]
            this.draw(map)
        }
        else if (this.import != null) {
            var map = this.import
            this.draw(map)
        }
        game.ctx.restore()

    }
}